#!/usr/bin/env python3
"""
Script de instala√ß√£o de depend√™ncias para o projeto Cap√≠tulo 7
Sistema Integrado de An√°lise do Agroneg√≥cio
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Executa um comando e retorna se foi bem-sucedido"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - Conclu√≠do")
            return True
        else:
            print(f"‚ùå {description} - Erro: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - Exce√ß√£o: {e}")
        return False

def check_python_version():
    """Verifica a vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    version = sys.version_info
    print(f"   Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 7):
        print("‚ùå Python 3.7+ √© necess√°rio")
        return False
    
    print("‚úÖ Vers√£o do Python compat√≠vel")
    return True

def install_package(package_name, description=None):
    """Instala um pacote Python"""
    if description is None:
        description = package_name
    
    print(f"üì¶ Instalando {description}...")
    
    # Comandos de instala√ß√£o com diferentes estrat√©gias
    commands = [
        f"pip install {package_name}",
        f"python -m pip install {package_name}",
        f"pip install --upgrade {package_name}",
        f"python -m pip install --upgrade --force-reinstall {package_name}"
    ]
    
    for i, command in enumerate(commands):
        if run_command(command, f"Tentativa {i+1}: {description}"):
            return True
    
    print(f"‚ùå Falha ao instalar {description}")
    return False

def test_import(package_name, import_statement=None):
    """Testa se um pacote pode ser importado"""
    if import_statement is None:
        import_statement = package_name
    
    try:
        exec(f"import {import_statement}")
        print(f"‚úÖ {package_name} - Importa√ß√£o OK")
        return True
    except ImportError as e:
        print(f"‚ùå {package_name} - Erro na importa√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("üåæ INSTALADOR DE DEPEND√äNCIAS - CAP√çTULO 7")
    print("Sistema Integrado de An√°lise do Agroneg√≥cio")
    print("=" * 60)
    print()
    
    # Verificar Python
    if not check_python_version():
        print("\n‚ùå Vers√£o do Python incompat√≠vel. Instale Python 3.7+")
        return False
    
    print()
    
    # Atualizar pip
    run_command("python -m pip install --upgrade pip", "Atualizando pip")
    print()
    
    # Lista de pacotes essenciais
    essential_packages = [
        ("pandas", "pandas"),
        ("numpy", "numpy"),
        ("matplotlib", "matplotlib"),
        ("seaborn", "seaborn"),
        ("openpyxl", "openpyxl"),
        ("scipy", "scipy")
    ]
    
    # Instalar pacotes
    print("üì¶ INSTALANDO PACOTES ESSENCIAIS")
    print("-" * 40)
    
    failed_packages = []
    for package, import_name in essential_packages:
        if not install_package(package, package):
            failed_packages.append(package)
        print()
    
    # Testar importa√ß√µes
    print("üß™ TESTANDO IMPORTA√á√ïES")
    print("-" * 40)
    
    import_failures = []
    for package, import_name in essential_packages:
        if not test_import(package, import_name):
            import_failures.append(package)
    
    # Resultado final
    print("\n" + "=" * 60)
    
    if not failed_packages and not import_failures:
        print("üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print()
        print("‚úÖ Todos os pacotes foram instalados e testados")
        print()
        print("üöÄ Voc√™ pode agora executar:")
        print("   python main.py --mode rapido")
        print("   python main.py --mode completo")
        print("   python main.py --deps  # Para verificar depend√™ncias")
        return True
    else:
        print("‚ö†Ô∏è  INSTALA√á√ÉO COM PROBLEMAS")
        print()
        if failed_packages:
            print(f"‚ùå Pacotes que falharam na instala√ß√£o: {', '.join(failed_packages)}")
        if import_failures:
            print(f"‚ùå Pacotes com erro de importa√ß√£o: {', '.join(import_failures)}")
        print()
        print("üîß SOLU√á√ïES RECOMENDADAS:")
        print("1. Execute manualmente:")
        print("   pip install --upgrade --force-reinstall pandas numpy matplotlib seaborn")
        print()
        print("2. Use ambiente virtual:")
        print("   python -m venv venv")
        print("   venv\\Scripts\\activate  # Windows")
        print("   pip install -r requirements.txt")
        print()
        print("3. Verifique conex√£o com internet")
        return False

if __name__ == "__main__":
    try:
        success = main()
        input("\nPressione Enter para sair...")
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Instala√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        input("\nPressione Enter para sair...")
        sys.exit(1)